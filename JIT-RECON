#!/bin/bash

# Define colors for formatting output
GREEN='\033[0;32m'
NORMAL='\033[0m'
BOLD='\033[1m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'

# Display JIT-RECON banner
printf "${BOLD}${CYAN}"
cat << "EOF"
     _ ___ _____     ____  _____ ____ ___  _   _ 
    | |_ _|_   _|   |  _ \| ____/ ___/ _ \| \ | |
 _  | || |  | |_____| |_) |  _|| |  | | | |  \| |
| |_| || |  | |_____|  _ <| |__| |__| |_| | |\  |
 \___/|___| |_|     |_| \_\_____\____\___/|_| \_| By: Hamdani Imad
                                                  Linkedin: www.linkedin.com/in/imad-hamdani
                                                  GitHub: github.com/criss0exe
EOF
printf "${NORMAL}\n"

# Function to display script usage
usage() {
    echo "Usage: $0 [-wr | -st] domain"
    echo "Options:"
    echo "  -wr             WEB RECON"
    echo "  -st          Checking subdomain takeover"
    echo "  domain          Specify the domain to perform reconnaissance on"
    exit 1
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -wr )
            RUN_FIRST=true
            shift
            ;;
        -st )
            RUN_SECOND=true
            shift
            ;;
        -* )
            echo "Error: Unknown option: $1"
            usage
            ;;
        * )
            DOMAIN="$1"
            shift
            ;;
    esac
done

# Check if no options were provided
if [[ ! $RUN_FIRST && ! $RUN_SECOND ]]; then
    echo "Error: No options provided."
    usage
fi

# Check if domain is provided
if [[ -z $DOMAIN ]]; then
    echo "Error: Domain not specified."
    usage
fi

# Create directory for the domain
TARGET_DIR="$DOMAIN"
mkdir -p "$TARGET_DIR"
cd "$TARGET_DIR"

##############################################
############# WEB RECON ######################
##############################################

if [[ $RUN_FIRST == true ]]; then
    # input
    printf "${GREEN}[+] Checking if the target is alive...${NORMAL}\n"
    if ping -c 1 -W 1 "$DOMAIN" &> /dev/null; then
        printf "\n${BOLD}${YELLOW}$DOMAIN${NORMAL} is alive!${NORMAL}\n\n"
    else
        printf "\n${BOLD}${YELLOW}$DOMAIN${RED} is not alive.${NORMAL}\n\n"
        exit 1
    fi

    printf "${GREEN}[+] Starting Footprinting and Reconnaissance on $DOMAIN${NORMAL}\n"

    # WHOIS
    printf "${GREEN}[+] Whois Lookup${NORMAL}\n"
    printf "${NORMAL}${CYAN}Searching domain name details, contact details of domain owner, domain name servers, netRange, domain dates, expiry records, records last updated...${NORMAL}\n\n"
    whois "$DOMAIN" | grep 'Domain\|Registry\|Registrar\|Updated\|Creation\|Registrant\|Name Server\|DNSSEC:\|Status\|Whois Server\|Admin\|Tech' | grep -v 'the Data in VeriSign Global Registry' | tee whois.txt

    # nslookup
    printf "\n${GREEN}[+] Nslookup ${NORMAL}\n"
    printf "${NORMAL}${CYAN}Searching DNS Queries...${NORMAL}\n\n"
    nslookup "$DOMAIN" | tee nslookup.txt

    # whatweb
    printf "\n${GREEN}[+] WhatWeb ${NORMAL}\n"
    printf "${NORMAL}${CYAN}Searching platform, type of script, google analytics, web server platform, IP address, country, server headers, cookies...${NORMAL}\n\n"
    whatweb "$DOMAIN" | tee whatweb.txt

    # robotScraper
    printf "\n${GREEN}[+] Robots.txt ${NORMAL}\n"
    printf "${NORMAL}${CYAN}Checking directories and files from robots.txt...${NORMAL}\n\n"
    python3 ../py/robotScraper.py -d "$DOMAIN" -s output_robot.txt 

    # nmap
    #printf "\n${GREEN}[+] Nmap ${NORMAL}\n"
    #printf "${NORMAL}${CYAN}Searching open ports...${NORMAL}\n\n"
    #nmap -p- --open -T5 -v -n "$DOMAIN" -oN nmap.txt

    # subfinder
    printf "${GREEN}[+] Finding subdomains with subfinder${NORMAL}\n"
    subfinder -d "$DOMAIN" -v -o subfinder_result.txt

    # httpx
    cat subfinder_result.txt | ~/go/bin/httpx -status-code -title -tech-detect > HTTPX_valid.txt
    cat HTTPX_valid.txt | awk '{print $1}' > nuclei_in.txt

    if [[ $? -ne 0 ]]; then
        echo "Failed"
        exit 1
    fi

    # Run nuclei
    printf "\n${GREEN}[+] Scanning for Vulns using nuclei${NORMAL}\n"
    ~/go/bin/nuclei -l nuclei_in.txt -v -severity high,critical -c 50
fi

#######################################################
############# SUBDOMAIN TAKEOVER ######################
#######################################################

if [[ $RUN_SECOND == true ]]; then
    # subfinder
    printf "${GREEN}[+] Finding subdomains with subfinder${NORMAL}\n"
    subfinder -d "$DOMAIN" -v -o subfinder_st_result.txt

    # subzy
    printf "${GREEN}[+] Checking subdomain takeover using Subzy${NORMAL}\n"
    subzy run --targets subfinder_st_result.txt --hide_fails
fi
